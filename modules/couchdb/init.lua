--- Access to CouchDB.
--
-- This module provides actions that allow access to CouchDB.
--
-- The module uses [Luchia](https://github.com/thehunmonkgroup/luchia) to
-- interface with CouchDB, so it must be installed and configured correctly.
--
-- For all actions below that support the 'server' parameter: the 'server'
-- parameter is a table of connection parameters to the CouchDB server, see
-- [here](http://thehunmonkgroup.github.io/luchia/doc/modules/luchia.conf.html#default.server)
-- for details.
--
-- If things aren't working, be sure to check the log file, as configured in
-- luchia/conf.lua.
--
--
-- @module couchdb
-- @author Chad Phillips
-- @copyright 2011-2015 Chad Phillips


--- Add an attachment to a document.
--
-- @action couchdb_add_attachment
-- @string action
--   couchdb\_add\_attachment
-- @string attachment_name
--   (Optional) File name for the attachment.
-- @string content_type
--   MIME type of the attachment.
-- @string database
--   Database to connect to.
-- @string document_id
--   (Optional) The document ID. If not provided, a new empty document will be
--   created.
-- @string document_rev
--   The current document revision, required if attaching to an existing
--   document.
-- @string file_path
--   File path to the attachment.
-- @tab server
--   (Optional) Table of server connection parameters.
-- @string storage_area
--   (Optional) The storage area to store the server response in. Defaults to
--   'couchdb\_add\_attachment'. This will contain 'id' and 'rev' keys of the
--   updated document on success.
-- @usage
--   {
--     action = "couchdb_add_attachment",
--     attachment_name = "attachment.txt",
--     content_type = "text/plain",
--     database = "example_db",
--     document_id = "example_doc",
--     document_rev = "1-5bfa2c99eefe2b2eb4962db50aa3cfd4",
--     file_path = "/tmp/attachment.txt",
--     server = profile.couchdb_server_params,
--     storage_area = "example_storage",
--   }


--- Create a document.
--
-- @action couchdb_create_document
-- @string action
--   couchdb\_create\_document
-- @string database
--   Database to connect to.
-- @tab document
--   A table of data representing the docuement to create.
-- @string document_id
--   (Optional) The document ID, one will be generated by the server if not
--   provided.
-- @tab server
--   (Optional) Table of server connection parameters.
-- @string storage_area
--   (Optional) The storage area to store the server response in. Defaults to
--   'couchdb\_create\_document'. This will contain 'id' and 'rev' keys of the
--   created document on success.
-- @usage
--   {
--     action = "couchdb_create_document",
--     database = "example_db",
--     document = {
--       foo = "bar",
--     },
--     document_id = "example_doc",
--     server = profile.couchdb_server_params,
--     storage_area = "example_storage",
--   }


--- Delete an attachment from a document.
--
-- @action couchdb_delete_attachment
-- @string action
--   couchdb\_delete\_attachment
-- @string attachment_name
--   The attachment name.
-- @string database
--   Database to connect to.
-- @string document_id
--   The document ID.
-- @string document_rev
--   The current document revision.
-- @tab server
--   (Optional) Table of server connection parameters.
-- @string storage_area
--   (Optional) The storage area to store the server response in. Defaults to
--   'couchdb\_delete\_attachment'. This will contain 'id' and 'rev' keys of the
--   updated document on success.
-- @usage
--   {
--     action = "couchdb_delete_attachment",
--     attachment_name = "attachment.txt",
--     database = "example_db",
--     document_id = "example_doc",
--     document_rev = "1-5bfa2c99eefe2b2eb4962db50aa3cfd4",
--     server = profile.couchdb_server_params,
--     storage_area = "example_storage",
--   }


--- Delete a document.
--
-- @action couchdb_delete_document
-- @string action
--   couchdb\_delete\_document
-- @string database
--   Database to connect to.
-- @string document_id
--   The document ID.
-- @string document_rev
--   The current document revision.
-- @tab server
--   (Optional) Table of server connection parameters.
-- @string storage_area
--   (Optional) The storage area to store the server response in. Defaults to
--   'couchdb\_delete\_document'. This will contain 'id' and 'rev' keys of the
--   deleted document on success.
-- @usage
--   {
--     action = "couchdb_delete_document",
--     database = "example_db",
--     document_id = "example_doc",
--     document_rev = "1-5bfa2c99eefe2b2eb4962db50aa3cfd4",
--     server = profile.couchdb_server_params,
--     storage_area = "example_storage",
--   }


--- Retrieve general data.
--
-- General retrieval function, this can be used to fetch data from any valid
-- path, such as for views, etc.
--
-- @action couchdb_retrieve
-- @string action
--   couchdb_retrieve
-- @string database
--   Database to connect to.
-- @string path
--   The path to retrieve. This should not include the database.
-- @tab query_parameters
--   (Optional) A table of query parameters to pass to the server.
-- @tab server
--   (Optional) Table of server connection parameters.
-- @string storage_area
--   (Optional) The storage area to store the data in after loading. Defaults
--   to 'couchdb\_retrieve'. This will contain a 'data' key on success with a
--   table representing the data.
-- @usage
--   {
--     action = "couchdb_retrieve",
--     database = "example_db",
--     path = "_design/foo/_view/bar",
--     query_parameters = {
--       revs = "true",
--     },
--     server = profile.couchdb_server_params,
--     storage_area = "example_storage",
--   }


--- Retrieve an attachment from a document.
--
-- @action couchdb_retrieve_attachment
-- @string action
--   couchdb\_retrieve\_attachment
-- @string attachment_name
--   The attachment name.
-- @string database
--   Database to connect to.
-- @string document_id
--   The document ID.
-- @string file_path
--   File path to write the retrieved attachment to.
-- @tab server
--   (Optional) Table of server connection parameters.
-- @string storage_area
--   (Optional) The storage area to store the server response in. Defaults to
--   'couchdb\_retrieve\_attachment'. This will contain 'attachment\_name' and
--   'file\_path' keys of the retrieved attachment on success.
-- @usage
--   {
--     action = "couchdb_retrieve_attachment",
--     attachment_name = "attachment.txt",
--     database = "example_db",
--     document_id = "example_doc",
--     file_path = "/tmp/attachment.txt",
--     server = profile.couchdb_server_params,
--     storage_area = "example_storage",
--   }


--- Retrieve a document.
--
-- @action couchdb_retrieve_document
-- @string action
--   couchdb\_retrieve\_document
-- @string database
--   Database to connect to.
-- @string document_id
--   The document ID.
-- @tab query_parameters
--   (Optional) A table of query parameters to pass to the server.
-- @tab server
--   (Optional) Table of server connection parameters.
-- @string storage_area
--   (Optional) The storage area to store the document in after loading.
--   Defaults to 'couchdb\_retrieve\_document'. This will contain 'document', 'id'
--   and 'rev' keys on success, 'document' is a table representing the document.
-- @usage
--   {
--     action = "couchdb_retrieve_document",
--     database = "example_db",
--     document_id = "example_doc",
--     query_parameters = {
--       revs = "true",
--     },
--     server = profile.couchdb_server_params,
--     storage_area = "example_storage",
--   }


--- Update a document.
--
-- @action couchdb_update_document
-- @string action
--   couchdb\_update\_document
-- @string database
--   Database to connect to.
-- @tab document
--   A table of data representing the docuement to update.
-- @string document_id
--   The document ID.
-- @string document_rev
--   The current document revision.
-- @tab server
--   (Optional) Table of server connection parameters.
-- @string storage_area
--   (Optional) The storage area to store the server response in. Defaults to
--   'couchdb\_update\_document'. This will contain 'id' and 'rev' keys of the
--   updated document on success.
-- @usage
--   {
--     action = "couchdb_update_document",
--     database = "example_db",
--     document = {
--       foo = "bar",
--     }
--     document_id = "example_doc",
--     document_rev = "1-5bfa2c99eefe2b2eb4962db50aa3cfd4",
--     server = profile.couchdb_server_params,
--     storage_area = "example_storage",
--   }

local core = require "jester.core"

local document = require "luchia.document"
local http_code_ok = 200

local _M = {}

--[[
  Sets up a new document handler.
]]
local function doc_handler(action)
  local database = action.database
  local server = action.server
  if database then
    local doc = document:new(database, server)
    if type(doc) == "table" then
      core.log.debug("New document handler for database: %s", action.database)
      return doc
    end
  end
end

--[[
  CouchDB action handlers.
]]

function _M.retrieve(action)
  local path = action.path
  local params = action.query_parameters
  local storage_area = action.storage_area or "couchdb_retrieve"
  core.clear_storage(storage_area)
  local doc = doc_handler(action)
  if doc then
    local resp, code = doc:retrieve(path, params)
    if code == http_code_ok then
      core.log.debug("Path '%s' retrieved from database: %s", path, action.database)
      core.set_storage(storage_area, "data", resp)
    end
  end
end


function _M.retrieve_document(action)
  local id = action.document_id
  local params = action.query_parameters
  local storage_area = action.storage_area or "couchdb_retrieve_document"
  core.clear_storage(storage_area)
  local doc = doc_handler(action)
  if doc then
    local resp, code = doc:retrieve(id, params)
    if code == http_code_ok then
      core.log.debug("Document ID '%s' retrieved from database: %s", resp._id, action.database)
      core.set_storage(storage_area, "id", resp._id)
      core.set_storage(storage_area, "rev", resp._rev)
      core.set_storage(storage_area, "document", resp)
    end
  end
end

function _M.create_document(action)
  local data = action.document
  local id = action.document_id
  local storage_area = action.storage_area or "couchdb_create_document"
  core.clear_storage(storage_area)
  local doc = doc_handler(action)
  if doc then
    local resp = doc:create(data, id)
    if doc:response_ok(resp) then
      core.log.debug("New document created for database: %s, id: %s", action.database, resp.id)
      core.set_storage(storage_area, "id", resp.id)
      core.set_storage(storage_area, "rev", resp.rev)
    end
  end
end

function _M.update_document(action)
  local data = action.document
  local id = action.document_id
  local rev = action.document_rev
  local storage_area = action.storage_area or "couchdb_update_document"
  core.clear_storage(storage_area)
  local doc = doc_handler(action)
  if doc then
    local resp = doc:update(data, id, rev)
    if doc:response_ok(resp) then
      core.log.debug("Document id '%s' updated for database: %s", resp.id, action.database)
      core.set_storage(storage_area, "id", resp.id)
      core.set_storage(storage_area, "rev", resp.rev)
    end
  end
end

function _M.delete_document(action)
  local id = action.document_id
  local rev = action.document_rev
  local storage_area = action.storage_area or "couchdb_delete_document"
  core.clear_storage(storage_area)
  local doc = doc_handler(action)
  if doc then
    local resp = doc:delete(id, rev)
    if doc:response_ok(resp) then
      core.log.debug("Document id '%s' deleted from database: %s", resp.id, action.database)
      core.set_storage(storage_area, "id", resp.id)
      core.set_storage(storage_area, "rev", resp.rev)
    end
  end
end

function _M.retrieve_attachment(action)
  local id = action.document_id
  local name = action.attachment_name
  local file_path = action.file_path
  local storage_area = action.storage_area or "couchdb_retrieve_attachment"
  core.clear_storage(storage_area)
  local doc = doc_handler(action)
  if doc then
    local file_data, code = doc:retrieve_attachment(name, id)
    if code == http_code_ok then
      -- Write out retrieved file data.
      local file = io.open(file_path, "w")
      if file then
        if file:write(file_data) then
          core.log.debug("Attachment '%s' retrieved from document ID '%s' in database '%s', written to file '%s'.", name, id, action.database, file_path)
          core.set_storage(storage_area, "attachment_name", name)
          core.set_storage(storage_area, "file_path", file_path)
        end
        file:close()
      end
    end
  end
end

function _M.add_attachment(action)
  local file_path = action.file_path
  local content_type = action.content_type
  local name = action.attachment_name
  local id = action.document_id
  local rev = action.document_rev
  local storage_area = action.storage_area or "couchdb_add_attachment"
  core.clear_storage(storage_area)
  local doc = doc_handler(action)
  if doc then
    local resp = doc:add_standalone_attachment(file_path, content_type, name, id, rev)
    if doc:response_ok(resp) then
      core.log.debug("File '%s' added as attachment '%s' to document ID '%s' in database: %s", file_path, name, resp.id, action.database)
      core.set_storage(storage_area, "id", resp.id)
      core.set_storage(storage_area, "rev", resp.rev)
    end
  end
end

function _M.delete_attachment(action)
  local name = action.attachment_name
  local id = action.document_id
  local rev = action.document_rev
  local storage_area = action.storage_area or "couchdb_delete_attachment"
  core.clear_storage(storage_area)
  local doc = doc_handler(action)
  if doc then
    local resp = doc:delete_attachment(name, id, rev)
    if doc:response_ok(resp) then
      core.log.debug("Attachment '%s' deleted from  document ID '%s' in database: %s", name, resp.id, action.database)
      core.set_storage(storage_area, "id", resp.id)
      core.set_storage(storage_area, "rev", resp.rev)
    end
  end
end

return _M
